"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
"""

import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Callable, Any
from ..bot.config import Config
from ..utils.logger import get_logger

logger = get_logger(__name__)


class EventScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
    
    def __init__(self):
        self.event_start_time: Optional[datetime] = None
        self.is_running: bool = False
        self.current_station: int = 0
        self.tasks: Dict[str, asyncio.Task] = {}
        self.callbacks: Dict[str, Callable] = {}
    
    def register_callback(self, event_type: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        self.callbacks[event_type] = callback
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event_type}")
    
    async def start_event(self, start_time: Optional[datetime] = None) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        if self.is_running:
            logger.warning("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
        
        self.event_start_time = start_time or datetime.now()
        self.is_running = True
        self.current_station = 0
        
        logger.info(f"üöÄ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ {self.event_start_time.strftime('%H:%M:%S')}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—Ç–∞—Ä—Ç–µ
        if "event_started" in self.callbacks:
            await self.callbacks["event_started"](self.event_start_time)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
        await self._schedule_all_stations()
        
        return True
    
    async def stop_event(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        if not self.is_running:
            logger.warning("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task_name, task in self.tasks.items():
            if not task.done():
                task.cancel()
                logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_name}")
        
        self.tasks.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if "event_stopped" in self.callbacks:
            await self.callbacks["event_stopped"]()
        
        logger.info("üõë –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    
    async def _schedule_all_stations(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
        if not self.event_start_time:
            return
        
        current_time = self.event_start_time
        
        for station_num in range(1, Config.TOTAL_STATIONS + 1):
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
            station_start_task = asyncio.create_task(
                self._schedule_station_start(station_num, current_time)
            )
            self.tasks[f"station_{station_num}_start"] = station_start_task
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
            work_end_time = current_time + timedelta(minutes=Config.STATION_DURATION_MINUTES)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–Ω—Ü–∏–∏)
            if station_num < Config.TOTAL_STATIONS:
                transition_task = asyncio.create_task(
                    self._schedule_transition_notification(station_num, work_end_time)
                )
                self.tasks[f"station_{station_num}_transition"] = transition_task
                
                # –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
                current_time = work_end_time + timedelta(minutes=Config.TRANSITION_DURATION_MINUTES)
            else:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                completion_task = asyncio.create_task(
                    self._schedule_event_completion(work_end_time)
                )
                self.tasks["event_completion"] = completion_task
        
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á –¥–ª—è {Config.TOTAL_STATIONS} —Å—Ç–∞–Ω—Ü–∏–π")
    
    async def _schedule_station_start(self, station_num: int, start_time: datetime):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏"""
        delay = (start_time - datetime.now()).total_seconds()
        
        if delay > 0:
            await asyncio.sleep(delay)
        
        if not self.is_running:
            return
        
        self.current_station = station_num
        logger.info(f"üèÅ –ù–∞—á–∞–ª–æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_num}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
        if "station_started" in self.callbacks:
            await self.callbacks["station_started"](station_num)
    
    async def _schedule_transition_notification(self, station_num: int, transition_time: datetime):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ"""
        delay = (transition_time - datetime.now()).total_seconds()
        
        if delay > 0:
            await asyncio.sleep(delay)
        
        if not self.is_running:
            return
        
        logger.info(f"üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ —Å—Ç–∞–Ω—Ü–∏–∏ {station_num}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
        if "transition_started" in self.callbacks:
            await self.callbacks["transition_started"](station_num, station_num + 1)
    
    async def _schedule_event_completion(self, completion_time: datetime):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        delay = (completion_time - datetime.now()).total_seconds()
        
        if delay > 0:
            await asyncio.sleep(delay)
        
        if not self.is_running:
            return
        
        self.is_running = False
        logger.info("üéä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if "event_completed" in self.callbacks:
            await self.callbacks["event_completed"]()
    
    def get_current_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        if not self.is_running or not self.event_start_time:
            return {
                "is_running": False,
                "current_station": 0,
                "elapsed_minutes": 0,
                "remaining_minutes": 0
            }
        
        now = datetime.now()
        elapsed = (now - self.event_start_time).total_seconds() / 60
        total_duration = Config().TOTAL_EVENT_DURATION_MINUTES
        remaining = max(0, total_duration - elapsed)
        
        return {
            "is_running": self.is_running,
            "current_station": self.current_station,
            "elapsed_minutes": int(elapsed),
            "remaining_minutes": int(remaining),
            "start_time": self.event_start_time.strftime("%H:%M:%S"),
            "progress_percentage": min(100, (elapsed / total_duration) * 100)
        }
    
    def get_station_timing(self, station_num: int) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if not self.event_start_time:
            return {}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        minutes_offset = (station_num - 1) * Config.TOTAL_CYCLE_MINUTES
        station_start = self.event_start_time + timedelta(minutes=minutes_offset)
        station_end = station_start + timedelta(minutes=Config.STATION_DURATION_MINUTES)
        
        timing = {
            "start_time": station_start.strftime("%H:%M"),
            "end_time": station_end.strftime("%H:%M"),
            "duration": f"{Config.STATION_DURATION_MINUTES} –º–∏–Ω"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–Ω—Ü–∏–∏)
        if station_num < Config.TOTAL_STATIONS:
            transition_end = station_end + timedelta(minutes=Config.TRANSITION_DURATION_MINUTES)
            timing["transition_end"] = transition_end.strftime("%H:%M")
            timing["transition_duration"] = f"{Config.TRANSITION_DURATION_MINUTES} –º–∏–Ω"
        
        return timing


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
event_scheduler = EventScheduler()


def get_event_scheduler() -> EventScheduler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    return event_scheduler 