"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import json
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from ..bot.config import Config
from .logger import get_logger

logger = get_logger(__name__)


class TextManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.stations_config = self._load_stations_config()
    
    def _load_stations_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π"""
        try:
            with open(Config.STATIONS_CONFIG_PATH, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
            return {}
    
    # =================== –°–û–û–ë–©–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú ===================
    
    def format_welcome_message(self, participant_number: int) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        event_description = self.stations_config.get("event_description", "")
        
        return f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Sechenov Pro Network!

–í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: #{participant_number:03d}

üìã –í–ê–ñ–ù–û: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CV
üë§ –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ —Ñ–æ—Ä–º–µ, —ç—Ç–æ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é —Å–≤–æ–µ–≥–æ CV

üîó –§–æ—Ä–º–∞: {Config.CV_FORM_URL}

–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–∞—à –º–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 8 –º–∏–Ω—É—Ç  
‚Ä¢ 6 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã + 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:
{event_description}

–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚è≥"""
    
    def format_already_registered_message(self, participant_number: int, current_station: int) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return f"""üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

–í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: #{participant_number:03d}
üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {current_station}/9

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é."""
    
    def format_event_started_message(self) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        return f"""üöÄ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!

–ü–µ—Ä–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!
–û–±—â–µ–µ –≤—Ä–µ–º—è: 70 –º–∏–Ω—É—Ç (9 —Å—Ç–∞–Ω—Ü–∏–π + –ø–µ—Ä–µ—Ö–æ–¥—ã)

‚è∞ –ì—Ä–∞—Ñ–∏–∫:
‚Ä¢ 6 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
‚Ä¢ 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥

–£–¥–∞—á–∏! üçÄ"""
    
    def format_station_message(self, station_number: int, station_letter: str) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        station_data = self.stations_config.get("stations", {}).get(station_letter, {})
        
        name = station_data.get("name", f"–°—Ç–∞–Ω—Ü–∏—è {station_letter}")
        location = station_data.get("location", f"–°—Ç–∞–Ω—Ü–∏—è {station_letter}")
        description = station_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏")
        
        return f"""üèÅ –°—Ç–∞–Ω—Ü–∏—è {station_number}/9: {name}

üìç –õ–æ–∫–∞—Ü–∏—è: {location}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 6 –º–∏–Ω—É—Ç
üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ—Ö–æ–¥: 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞–Ω—Ü–∏–∏

{description}

‚¨áÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å—Ç–∞–Ω—Ü–∏–∏ —Å–µ–π—á–∞—Å!"""
    
    def format_transition_message(self, from_station: int, to_station: int, to_letter: str) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ"""
        station_data = self.stations_config.get("stations", {}).get(to_letter, {})
        name = station_data.get("name", f"–°—Ç–∞–Ω—Ü–∏—è {to_letter}")
        location = station_data.get("location", f"–°—Ç–∞–Ω—Ü–∏—è {to_letter}")
        
        return f"""üö∂‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞!

–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏:
üèÅ –°—Ç–∞–Ω—Ü–∏—è {to_station}/9: {name}

‚è∞ –£ –≤–∞—Å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
üìç –õ–æ–∫–∞—Ü–∏—è: {location}

–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""
    
    def format_event_completed_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        return f"""üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º!

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ Sechenov Pro Network!
–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ 9 —Å—Ç–∞–Ω—Ü–∏–π –∑–∞ 70 –º–∏–Ω—É—Ç!

üåü –í–∞—à CV –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–æ—Ä–º—ã
üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ –∫–∞—Ä—å–µ—Ä–µ!

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö! üëã"""
    
    # =================== –ú–ï–ù–Æ –£–ß–ê–°–¢–ù–ò–ö–û–í ===================
    
    def format_current_station_info(self, participant_number: int, current_station: int, 
                                  station_letter: str, event_start_time: Optional[datetime] = None) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if current_station == 0:
            return f"""üë§ –£—á–∞—Å—Ç–Ω–∏–∫ #{participant_number:03d}
üìä –°—Ç–∞–Ω—Ü–∏—è: –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
‚è∞ –°—Ç–∞—Ç—É—Å: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å

–î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥—ã /start_event –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        
        station_data = self.stations_config.get("stations", {}).get(station_letter, {})
        name = station_data.get("name", f"–°—Ç–∞–Ω—Ü–∏—è {station_letter}")
        description = station_data.get("description", "")
        
        time_info = ""
        if event_start_time:
            time_info = self._calculate_station_timing(current_station, event_start_time)
        
        return f"""üèÅ –°—Ç–∞–Ω—Ü–∏—è {current_station}/9: {name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{description}

{time_info}

üë§ –£—á–∞—Å—Ç–Ω–∏–∫ #{participant_number:03d}"""
    
    def format_next_station_info(self, current_station: int, next_letter: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if current_station >= 9:
            return "üèÅ –í—ã –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏! –°–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ—Ç."
        
        next_station = current_station + 1
        station_data = self.stations_config.get("stations", {}).get(next_letter, {})
        name = station_data.get("name", f"–°—Ç–∞–Ω—Ü–∏—è {next_letter}")
        location = station_data.get("location", f"–°—Ç–∞–Ω—Ü–∏—è {next_letter}")
        description = station_data.get("description", "")
        
        return f"""‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è {next_station}/9: {name}

üìç –õ–æ–∫–∞—Ü–∏—è: {location}

üìù –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:
{description}

‚è∞ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞: 2 –º–∏–Ω—É—Ç—ã
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 6 –º–∏–Ω—É—Ç"""
    
    def format_full_schedule(self, event_start_time: Optional[datetime] = None) -> str:
        """–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        schedule_text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        
        if event_start_time:
            schedule_text += f"üöÄ –°—Ç–∞—Ä—Ç: {event_start_time.strftime('%H:%M')}\n\n"
        
        stations = self.stations_config.get("stations", {})
        for i, (letter, station_data) in enumerate(stations.items(), 1):
            name = station_data.get("name", f"–°—Ç–∞–Ω—Ü–∏—è {letter}")
            
            if event_start_time:
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                start_minutes = (i - 1) * Config.TOTAL_CYCLE_MINUTES
                end_minutes = start_minutes + Config.STATION_DURATION_MINUTES
                
                start_time = event_start_time + timedelta(minutes=start_minutes)
                end_time = event_start_time + timedelta(minutes=end_minutes)
                
                time_str = f" ({start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')})"
                
                if i < 9:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–Ω—Ü–∏—è
                    transition_end = end_time + timedelta(minutes=Config.TRANSITION_DURATION_MINUTES)
                    time_str += f" + –ø–µ—Ä–µ—Ö–æ–¥ –¥–æ {transition_end.strftime('%H:%M')}"
                else:
                    time_str += " - –§–ò–ù–ò–®"
            else:
                time_str = ""
            
            schedule_text += f"–°—Ç–∞–Ω—Ü–∏—è {i}: {name}{time_str}\n"
        
        schedule_text += f"\n‚è∞ –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 70 –º–∏–Ω—É—Ç"
        return schedule_text
    
    def format_participant_info(self, participant_number: int, current_station: int, 
                              route: str, event_start_time: Optional[datetime] = None) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        status = "–†–∞–±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ‚úÖ" if current_station > 0 else "–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ ‚è≥"
        
        time_info = ""
        if event_start_time and current_station > 0:
            time_info = self._calculate_participant_timing(current_station, event_start_time)
        
        return f"""üë§ –£—á–∞—Å—Ç–Ω–∏–∫ #{participant_number:03d}
üìä –°—Ç–∞–Ω—Ü–∏—è: {current_station}/9
üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {route}

{time_info}

–°—Ç–∞—Ç—É—Å: {status}"""
    
    def format_contact_organizer(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º"""
        return """üìû –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:

‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ–º–æ—â—å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

–ù–∞–π–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ–±—â–∏–π —á–∞—Ç."""
    
    # =================== –ê–î–ú–ò–ù–°–ö–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ===================
    
    def format_admin_status(self, stats: Dict[str, Any], event_start_time: Optional[datetime] = None) -> str:
        """–°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        total_participants = stats.get("total_participants", 0)
        current_station = stats.get("current_station", 0)
        event_status = stats.get("event_status", "unknown")
        
        status_emoji = {
            "active": "üü¢",
            "completed": "‚úÖ", 
            "stopped": "üî¥",
            "unknown": "‚ö™"
        }
        
        status_text = f"""üìä –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

{status_emoji.get(event_status, '‚ö™')} –°—Ç–∞—Ç—É—Å: {event_status}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}
üèÅ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {current_station}/9"""
        
        if event_start_time:
            now = datetime.now()
            elapsed = now - event_start_time
            elapsed_minutes = int(elapsed.total_seconds() / 60)
            remaining_minutes = max(0, 70 - elapsed_minutes)
            
            status_text += f"""
‚è∞ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes} –º–∏–Ω
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_minutes} –º–∏–Ω
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {min(100, (elapsed_minutes / 70) * 100):.1f}%"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
        station_distribution = stats.get("station_distribution", {})
        if station_distribution:
            status_text += "\n\nüìç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º:"
            for station_key, count in station_distribution.items():
                station_num = station_key.replace("station_", "")
                status_text += f"\n‚Ä¢ –°—Ç–∞–Ω—Ü–∏—è {station_num}: {count} —á–µ–ª."
        
        return status_text
    
    def format_event_start_success(self, participants_count: int) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        return f"""‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!

üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}
‚è∞ –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 70 –º–∏–Ω—É—Ç
üèÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π: 9

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞."""
    
    def format_event_stop_success(self) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        return """üõë –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!

–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.
–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    
    # =================== –£–¢–ò–õ–ò–¢–´ ===================
    
    def _calculate_station_timing(self, station: int, event_start_time: datetime) -> str:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏"""
        now = datetime.now()
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        station_start_minutes = (station - 1) * Config.TOTAL_CYCLE_MINUTES
        station_start_time = event_start_time + timedelta(minutes=station_start_minutes)
        
        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        work_end_time = station_start_time + timedelta(minutes=Config.STATION_DURATION_MINUTES)
        
        if now < work_end_time:
            # –°—Ç–∞–Ω—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç
            remaining = work_end_time - now
            remaining_minutes = int(remaining.total_seconds() / 60)
            remaining_seconds = int(remaining.total_seconds() % 60)
            return f"‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {remaining_minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫"
        else:
            # –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            if station < 9:
                transition_end_time = work_end_time + timedelta(minutes=Config.TRANSITION_DURATION_MINUTES)
                if now < transition_end_time:
                    remaining = transition_end_time - now
                    remaining_minutes = int(remaining.total_seconds() / 60)
                    remaining_seconds = int(remaining.total_seconds() % 60)
                    return f"üö∂‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥: {remaining_minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫"
                else:
                    return "‚è≠Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"
            else:
                return "üéä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    
    def _calculate_participant_timing(self, station: int, event_start_time: datetime) -> str:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return self._calculate_station_timing(station, event_start_time)
    
    def get_station_letter_by_number(self, station_number: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—É–∫–≤—ã —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
        station_mapping = {1: "A", 2: "B", 3: "C", 4: "D", 5: "E", 6: "F", 7: "G", 8: "H", 9: "I"}
        return station_mapping.get(station_number, "A")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_text_manager = None


def get_text_manager() -> TextManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
    global _text_manager
    if _text_manager is None:
        _text_manager = TextManager()
    return _text_manager 