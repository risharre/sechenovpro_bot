"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Sechenov Pro Bot
"""

from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional, Dict, Any
import json


@dataclass
class Participant:
    """–ú–æ–¥–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    id: Optional[int] = None
    telegram_id: int = 0
    participant_number: int = 0
    username: Optional[str] = None
    first_name: Optional[str] = None
    registration_time: Optional[datetime] = None
    current_station: int = 0
    route_data: List[str] = None
    is_active: bool = True
    last_activity: Optional[datetime] = None
    
    def __post_init__(self):
        if self.route_data is None:
            self.route_data = []
    
    @property
    def formatted_number(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏"""
        return f"{self.participant_number:03d}"
    
    @property
    def display_name(self) -> str:
        """–ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.first_name or self.username or f"–£—á–∞—Å—Ç–Ω–∏–∫ #{self.formatted_number}"
    
    @property
    def current_station_id(self) -> Optional[str]:
        """ID —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if self.current_station > 0 and self.current_station <= len(self.route_data):
            return self.route_data[self.current_station - 1]
        return None
    
    @property
    def next_station_id(self) -> Optional[str]:
        """ID —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if self.current_station < len(self.route_data):
            return self.route_data[self.current_station]
        return None
    
    @property
    def progress_text(self) -> str:
        """–¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return f"{self.current_station}/{len(self.route_data)}"
    
    @property
    def route_display(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
        return "‚Üí".join(self.route_data) if self.route_data else ""
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return {
            "telegram_id": self.telegram_id,
            "participant_number": self.participant_number,
            "username": self.username,
            "first_name": self.first_name,
            "current_station": self.current_station,
            "route_data": json.dumps(self.route_data),
            "is_active": self.is_active,
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Participant":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–∏–∑ –ë–î)"""
        route_data = data.get("route_data", "[]")
        if isinstance(route_data, str):
            route_data = json.loads(route_data)
        
        return cls(
            id=data.get("id"),
            telegram_id=data.get("telegram_id", 0),
            participant_number=data.get("participant_number", 0),
            username=data.get("username"),
            first_name=data.get("first_name"),
            registration_time=data.get("registration_time"),
            current_station=data.get("current_station", 0),
            route_data=route_data,
            is_active=data.get("is_active", True),
            last_activity=data.get("last_activity"),
        )


@dataclass
class Event:
    """–ú–æ–¥–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    id: Optional[int] = None
    start_time: Optional[datetime] = None
    is_active: bool = False
    current_station: int = 0
    created_at: Optional[datetime] = None
    
    @property
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
        return self.is_active and self.start_time is not None
    
    @property
    def has_finished(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
        from ..bot.config import Config
        return self.current_station >= Config.TOTAL_STATIONS
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return {
            "start_time": self.start_time,
            "is_active": self.is_active,
            "current_station": self.current_station,
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Event":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–∏–∑ –ë–î)"""
        return cls(
            id=data.get("id"),
            start_time=data.get("start_time"),
            is_active=data.get("is_active", False),
            current_station=data.get("current_station", 0),
            created_at=data.get("created_at"),
        )


@dataclass
class AdminMessage:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    id: Optional[int] = None
    participant_id: int = 0
    participant_telegram_id: int = 0
    participant_name: str = ""
    message_text: str = ""
    created_at: Optional[datetime] = None
    is_resolved: bool = False
    
    @property
    def formatted_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        return (
            f"üìû –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n\n"
            f"üë§ {self.participant_name} (ID: {self.participant_telegram_id})\n"
            f"üí¨ {self.message_text}\n\n"
            f"‚è∞ {self.created_at.strftime('%H:%M:%S') if self.created_at else '–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return {
            "participant_id": self.participant_id,
            "message_text": self.message_text,
            "is_resolved": self.is_resolved,
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "AdminMessage":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–∏–∑ –ë–î)"""
        return cls(
            id=data.get("id"),
            participant_id=data.get("participant_id", 0),
            message_text=data.get("message_text", ""),
            created_at=data.get("created_at"),
            is_resolved=data.get("is_resolved", False),
        )


@dataclass
class Station:
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞–Ω—Ü–∏–∏"""
    id: str
    name: str
    location: str
    description: str
    group_info: str
    
    @property
    def formatted_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω—Ü–∏–∏"""
        return (
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {self.location}\n"
            f"üë• –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {self.group_info}\n\n"
            f"{self.description}\n\n"
            f"‚¨áÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å—Ç–∞–Ω—Ü–∏–∏ —Å–µ–π—á–∞—Å!"
        )
    
    @classmethod
    def from_dict(cls, station_id: str, data: Dict[str, Any]) -> "Station":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return cls(
            id=station_id,
            name=data.get("name", ""),
            location=data.get("location", ""),
            description=data.get("description", ""),
            group_info=data.get("group_info", ""),
        ) 