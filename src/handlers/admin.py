"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import csv
import io
from datetime import datetime
from typing import List

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command

from ..bot.config import Config
from ..database.queries import get_db_queries
from ..utils.text_manager import get_text_manager
from ..utils.scheduler import get_event_scheduler
from ..utils.logger import get_logger
from .menu import get_admin_menu
from .participant import (
    broadcast_to_all_participants,
    broadcast_station_to_all,
    send_event_start_notification,
    send_event_completion_notification
)

logger = get_logger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = get_db_queries()
text_manager = get_text_manager()
scheduler = get_event_scheduler()


def is_admin(telegram_username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not telegram_username:
        return False
    
    admin_usernames = [username.lower().strip('@') for username in Config.ADMIN_USERNAMES]
    user_username = telegram_username.lower().strip('@')
    
    return user_username in admin_usernames


@router.message(Command("start_event"))
async def cmd_start_event(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start_event - –∑–∞–ø—É—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start_event –æ—Ç –∞–¥–º–∏–Ω–∞ @{user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        existing_event = await db.get_active_event()
        if existing_event:
            await message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_event –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db.get_all_active_participants()
        if not participants:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event = await db.create_event(user.id)
        if not event:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        await scheduler.setup_event_schedule(
            on_station_start=_on_station_start,
            on_transition_start=_on_transition_start,
            on_event_complete=_on_event_complete
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await scheduler.start_event()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        start_message = text_manager.format_event_started_message()
        sent_count, failed_count = await broadcast_to_all_participants(start_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
        await broadcast_station_to_all(1)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = text_manager.format_event_start_success(sent_count)
        await message.answer(success_message, reply_markup=get_admin_menu())
        
        logger.info(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{user.username}: {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start_event: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –∞–¥–º–∏–Ω–∞ @{user.username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        stats = await db.get_event_statistics()
        
        if not stats:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_start_time = None
        active_event = await db.get_active_event()
        if active_event:
            event_start_time = active_event.start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = text_manager.format_admin_status(stats, event_start_time)
        
        await message.answer(status_message, reply_markup=get_admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.message(Command("stop_event"))
async def cmd_stop_event(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stop_event - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stop_event –æ—Ç –∞–¥–º–∏–Ω–∞ @{user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        active_event = await db.get_active_event()
        if not active_event:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await scheduler.stop_event()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.stop_event(active_event.id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        stop_message = "üõë –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        sent_count, failed_count = await broadcast_to_all_participants(stop_message)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = text_manager.format_event_stop_success()
        await message.answer(success_message, reply_markup=get_admin_menu())
        
        logger.info(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{user.username}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stop_event: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@router.message(Command("report"))
async def cmd_report(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /report - —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /report –æ—Ç –∞–¥–º–∏–Ω–∞ @{user.username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        csv_data = await db.export_participants_csv()
        
        if not csv_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.DictWriter(output, fieldnames=[
            "participant_number", "telegram_id", "telegram_username", 
            "full_name", "current_station", "route", "registration_date", 
            "last_updated", "is_active"
        ])
        
        writer.writeheader()
        writer.writerows(csv_data)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        csv_content = output.getvalue().encode('utf-8-sig')  # BOM –¥–ª—è Excel
        output.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"sechenov_pro_participants_{timestamp}.csv"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        csv_file = BufferedInputFile(
            csv_content,
            filename=filename
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            csv_file,
            caption=f"üìä –û—Ç—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
                   f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                   f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(csv_data)}"
        )
        
        logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É @{user.username}: {len(csv_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /report: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")


@router.callback_query(F.data == "admin_status")
async def callback_admin_status(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    try:
        user = callback.from_user
        if not user or not user.username:
            await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_event_statistics()
        
        if not stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
                reply_markup=get_admin_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        event_start_time = None
        active_event = await db.get_active_event()
        if active_event:
            event_start_time = active_event.start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_message = text_manager.format_admin_status(stats, event_start_time)
        
        await callback.message.edit_text(
            status_message,
            reply_markup=get_admin_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_status: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "admin_broadcast")
async def callback_admin_broadcast(callback: CallbackQuery):
    """Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user = callback.from_user
        if not user or not user.username:
            await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        broadcast_text = """üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"""
        
        await callback.message.edit_text(broadcast_text)
        await callback.answer()
        
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_admin_broadcast: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# =================== CALLBACK –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===================

async def _on_station_start(station_number: int):
    """Callback –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å—Ç–∞–Ω—Ü–∏–∏"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_number}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        sent_count = await broadcast_station_to_all(station_number)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_message = f"üèÅ –°—Ç–∞–Ω—Ü–∏—è {station_number}/9 –∑–∞–ø—É—â–µ–Ω–∞\nüë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sent_count}"
        await _notify_all_admins(admin_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _on_station_start –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_number}: {e}")


async def _on_transition_start(from_station: int, to_station: int):
    """Callback –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ {from_station} –Ω–∞ {to_station}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
        from .participant import broadcast_transition_to_all
        sent_count = await broadcast_transition_to_all(from_station, to_station)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_message = f"üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ {from_station}‚Üí{to_station}\nüë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sent_count}"
        await _notify_all_admins(admin_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _on_transition_start {from_station}‚Üí{to_station}: {e}")


async def _on_event_complete():
    """Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        logger.info("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        active_event = await db.get_active_event()
        if active_event:
            await db.complete_event(active_event.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        completion_message = text_manager.format_event_completed_message()
        sent_count, failed_count = await broadcast_to_all_participants(completion_message)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_message = f"üéä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sent_count}"
        await _notify_all_admins(admin_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _on_event_complete: {e}")


async def _notify_all_admins(message_text: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∏–∑ –Ω–∏—Ö –∞–¥–º–∏–Ω
        participants = await db.get_all_active_participants()
        admin_count = 0
        
        for participant in participants:
            if participant.telegram_username and is_admin(participant.telegram_username):
                try:
                    await bot.send_message(participant.telegram_id, message_text)
                    admin_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {participant.telegram_id}: {e}")
        
        if admin_count > 0:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–æ–≤")
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        await bot.session.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")


# =================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===================

@router.message(Command("participants"))
async def cmd_participants(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        participants = await db.get_all_active_participants()
        
        if not participants:
            await message.answer("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
        station_groups = {}
        for participant in participants:
            station = participant.current_station
            if station not in station_groups:
                station_groups[station] = []
            station_groups[station].append(participant)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        
        for station in sorted(station_groups.keys()):
            participants_list = station_groups[station]
            station_name = "–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞" if station == 0 else f"–°—Ç–∞–Ω—Ü–∏—è {station}"
            
            response_text += f"üìç {station_name}: {len(participants_list)} —á–µ–ª.\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i, participant in enumerate(participants_list[:5]):
                response_text += f"  ‚Ä¢ #{participant.participant_number:03d} {participant.full_name}\n"
            
            if len(participants_list) > 5:
                response_text += f"  ... –∏ –µ—â–µ {len(participants_list) - 5} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            
            response_text += "\n"
        
        await message.answer(response_text[:4096])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /participants: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


@router.message(Command("help_admin"))
async def cmd_help_admin(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    try:
        user = message.from_user
        if not user or not user.username:
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º username")
            return
        
        if not is_admin(user.username):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        help_text = """üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:

/start_event - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
/status - –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è  
/stop_event - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
/report - –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV
/participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/help_admin - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 70 –º–∏–Ω—É—Ç:
‚Ä¢ 9 —Å—Ç–∞–Ω—Ü–∏–π –ø–æ 6 –º–∏–Ω—É—Ç
‚Ä¢ 8 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ 2 –º–∏–Ω—É—Ç—ã  
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –í–æ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_event"""
        
        await message.answer(help_text, reply_markup=get_admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help_admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 