"""
–ú–æ–¥—É–ª—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional

from ..utils.logger import get_logger

logger = get_logger(__name__)


def get_participant_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üèÅ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
                callback_data="current_station"
            ),
            InlineKeyboardButton(
                text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è", 
                callback_data="next_station"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data="full_schedule"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                callback_data="participant_info"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìû –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º",
                callback_data="contact_organizer"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                callback_data="admin_status"
            )
        ],
        [
            InlineKeyboardButton(
                text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                callback_data="admin_start_event"
            ),
            InlineKeyboardButton(
                text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                callback_data="admin_stop_event"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                callback_data="admin_export"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ",
                callback_data="admin_broadcast"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_station_navigation_menu(current_station: int, total_stations: int = 9) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º"""
    keyboard = []
    
    # –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
    station_row = [
        InlineKeyboardButton(
            text=f"üìç –°—Ç–∞–Ω—Ü–∏—è {current_station}/{total_stations}",
            callback_data="current_station"
        )
    ]
    keyboard.append(station_row)
    
    # –°—Ç—Ä–æ–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    
    if current_station > 1:
        nav_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                callback_data=f"station_{current_station-1}"
            )
        )
    
    if current_station < total_stations:
        nav_row.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                callback_data=f"station_{current_station+1}"
            )
        )
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_menu(action: str, confirm_callback: str, cancel_callback: str = "back_to_menu") -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=confirm_callback
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=cancel_callback
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_event_control_menu(event_active: bool = False) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = []
    
    if not event_active:
        # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
        keyboard.append([
            InlineKeyboardButton(
                text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                callback_data="confirm_start_event"
            )
        ])
    else:
        # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        keyboard.extend([
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    callback_data="admin_status"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                    callback_data="confirm_stop_event"
                )
            ]
        ])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
                callback_data="admin_participants"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
                callback_data="admin_export"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_refresh"
            )
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_station_details_menu(station_number: int) -> InlineKeyboardMarkup:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
    keyboard = []
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏
    info_row = [
        InlineKeyboardButton(
            text="üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏",
            callback_data=f"station_info_{station_number}"
        )
    ]
    
    if station_number > 1:
        info_row.append(
            InlineKeyboardButton(
                text="üìç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è",
                callback_data=f"station_location_{station_number}"
            )
        )
    
    keyboard.append(info_row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    nav_row = []
    
    if station_number > 1:
        nav_row.append(
            InlineKeyboardButton(
                text=f"‚¨ÖÔ∏è –°—Ç–∞–Ω—Ü–∏—è {station_number-1}",
                callback_data=f"goto_station_{station_number-1}"
            )
        )
    
    if station_number < 9:
        nav_row.append(
            InlineKeyboardButton(
                text=f"‚û°Ô∏è –°—Ç–∞–Ω—Ü–∏—è {station_number+1}",
                callback_data=f"goto_station_{station_number+1}"
            )
        )
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text="üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="full_schedule"
        )
    ])
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_participant_quick_menu() -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üèÅ –ú–æ—è —Å—Ç–∞–Ω—Ü–∏—è",
                callback_data="current_station"
            ),
            InlineKeyboardButton(
                text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                callback_data="next_station"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data="full_schedule"
            ),
            InlineKeyboardButton(
                text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                callback_data="participant_info"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_broadcast_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                callback_data="create_broadcast"
            )
        ],
        [
            InlineKeyboardButton(
                text="üéØ –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å—Ç–∞–Ω—Ü–∏–∏",
                callback_data="broadcast_station"
            ),
            InlineKeyboardButton(
                text="üö∂‚Äç‚ôÇÔ∏è –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–µ—Ä–µ—Ö–æ–¥–µ",
                callback_data="broadcast_transition"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="admin_menu"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_export_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                callback_data="export_all_participants"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º",
                callback_data="export_station_stats"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
                callback_data="export_progress_report"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="admin_menu"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_help_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏"""
    keyboard = []
    
    if is_admin:
        keyboard.extend([
            [
                InlineKeyboardButton(
                    text="üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞",
                    callback_data="help_admin_commands"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º",
                    callback_data="help_event_management"
                )
            ]
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(
                text="‚ùì –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                callback_data="help_participation"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –û —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                callback_data="help_schedule"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤",
                callback_data="contact_organizer"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_dynamic_station_menu(current_station: int, has_next: bool = True, has_prev: bool = True) -> InlineKeyboardMarkup:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —Å—Ç–∞–Ω—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    keyboard = []
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text=f"üìç –°—Ç–∞–Ω—Ü–∏—è {current_station} (—Ç–µ–∫—É—â–∞—è)",
            callback_data="current_station"
        )
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    
    if has_prev:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                callback_data=f"station_{current_station-1}"
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                callback_data=f"station_{current_station+1}"
            )
        )
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard.extend([
        [
            InlineKeyboardButton(
                text="üìã –í—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏",
                callback_data="full_schedule"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================== CALLBACK DATA –ö–û–ù–°–¢–ê–ù–¢–´ ===================

class CallbackData:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data"""
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    CURRENT_STATION = "current_station"
    NEXT_STATION = "next_station"
    FULL_SCHEDULE = "full_schedule"
    PARTICIPANT_INFO = "participant_info"
    CONTACT_ORGANIZER = "contact_organizer"
    BACK_TO_MENU = "back_to_menu"
    
    # –ê–¥–º–∏–Ω—ã
    ADMIN_STATUS = "admin_status"
    ADMIN_START_EVENT = "admin_start_event"
    ADMIN_STOP_EVENT = "admin_stop_event"
    ADMIN_EXPORT = "admin_export"
    ADMIN_BROADCAST = "admin_broadcast"
    ADMIN_PARTICIPANTS = "admin_participants"
    ADMIN_REFRESH = "admin_refresh"
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    CONFIRM_START_EVENT = "confirm_start_event"
    CONFIRM_STOP_EVENT = "confirm_stop_event"
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    EXPORT_ALL_PARTICIPANTS = "export_all_participants"
    EXPORT_STATION_STATS = "export_station_stats"
    EXPORT_PROGRESS_REPORT = "export_progress_report"
    
    # –†–∞—Å—Å—ã–ª–∫–∞
    CREATE_BROADCAST = "create_broadcast"
    BROADCAST_STATION = "broadcast_station"
    BROADCAST_TRANSITION = "broadcast_transition"
    
    # –°–ø—Ä–∞–≤–∫–∞
    HELP_ADMIN_COMMANDS = "help_admin_commands"
    HELP_EVENT_MANAGEMENT = "help_event_management"
    HELP_PARTICIPATION = "help_participation"
    HELP_SCHEDULE = "help_schedule"


def build_station_callback(station_number: int) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callback –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
    return f"station_{station_number}"


def build_goto_station_callback(station_number: int) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞–Ω—Ü–∏–∏"""
    return f"goto_station_{station_number}"


def parse_station_callback(callback_data: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ callback_data"""
    try:
        if callback_data.startswith("station_"):
            return int(callback_data.replace("station_", ""))
        elif callback_data.startswith("goto_station_"):
            return int(callback_data.replace("goto_station_", ""))
        return None
    except (ValueError, AttributeError):
        return None


# =================== –ú–ï–ù–Æ –î–õ–Ø –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–ï–í ===================

def get_maintenance_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data="check_maintenance_status"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                callback_data="contact_organizer"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_error_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data="retry_action"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìû –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
                callback_data="report_error"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 