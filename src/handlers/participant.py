"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import Optional

from ..database.queries import get_db_queries
from ..utils.text_manager import get_text_manager
from ..utils.csv_handler import get_csv_handler
from ..utils.scheduler import get_event_scheduler
from ..utils.logger import get_logger
from .menu import get_participant_menu

logger = get_logger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = get_db_queries()
text_manager = get_text_manager()
csv_handler = get_csv_handler()
scheduler = get_event_scheduler()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        user = message.from_user
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        telegram_id = user.id
        telegram_username = user.username or "unknown"
        full_name = user.full_name or f"User {telegram_id}"
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (@{telegram_username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫
        existing_participant = await db.get_participant_by_telegram_id(telegram_id)
        
        if existing_participant:
            # –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            welcome_text = text_manager.format_already_registered_message(
                existing_participant.participant_number,
                existing_participant.current_station
            )
            keyboard = get_participant_menu()
            await message.answer(welcome_text, reply_markup=keyboard)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        route = csv_handler.get_next_route()
        if not route:
            await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∑–∞–Ω—è—Ç—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = await db.create_participant(
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            full_name=full_name,
            route=route
        )
        
        if not participant:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = text_manager.format_welcome_message(participant.participant_number)
        keyboard = get_participant_menu()
        
        await message.answer(welcome_text, reply_markup=keyboard)
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫ #{participant.participant_number}: {full_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.callback_query(F.data == "current_station")
async def callback_current_station(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
    try:
        user = callback.from_user
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        participant = await db.get_participant_by_telegram_id(user.id)
        if not participant:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_start_time = None
        active_event = await db.get_active_event()
        if active_event:
            event_start_time = active_event.start_time
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É —Å—Ç–∞–Ω—Ü–∏–∏
        station_letter = text_manager.get_station_letter_by_number(participant.current_station)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        station_info = text_manager.format_current_station_info(
            participant.participant_number,
            participant.current_station,
            station_letter,
            event_start_time
        )
        
        await callback.message.edit_text(
            station_info,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_current_station: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "next_station")
async def callback_next_station(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
    try:
        user = callback.from_user
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        participant = await db.get_participant_by_telegram_id(user.id)
        if not participant:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        next_station_number = participant.current_station + 1
        next_letter = text_manager.get_station_letter_by_number(next_station_number)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        next_info = text_manager.format_next_station_info(
            participant.current_station,
            next_letter
        )
        
        await callback.message.edit_text(
            next_info,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_next_station: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "full_schedule")
async def callback_full_schedule(callback: CallbackQuery):
    """–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_start_time = None
        active_event = await db.get_active_event()
        if active_event:
            event_start_time = active_event.start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_text = text_manager.format_full_schedule(event_start_time)
        
        await callback.message.edit_text(
            schedule_text,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_full_schedule: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "participant_info")
async def callback_participant_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        user = callback.from_user
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        participant = await db.get_participant_by_telegram_id(user.id)
        if not participant:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_start_time = None
        active_event = await db.get_active_event()
        if active_event:
            event_start_time = active_event.start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant_info = text_manager.format_participant_info(
            participant.participant_number,
            participant.current_station,
            participant.route,
            event_start_time
        )
        
        await callback.message.edit_text(
            participant_info,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_participant_info: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "contact_organizer")
async def callback_contact_organizer(callback: CallbackQuery):
    """–°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º"""
    try:
        contact_info = text_manager.format_contact_organizer()
        
        await callback.message.edit_text(
            contact_info,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_contact_organizer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = callback.from_user
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        participant = await db.get_participant_by_telegram_id(user.id)
        if not participant:
            welcome_text = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        else:
            welcome_text = f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ #{participant.participant_number:03d}\nüìä –°—Ç–∞–Ω—Ü–∏—è: {participant.current_station}/9\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            welcome_text,
            reply_markup=get_participant_menu()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_back_to_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# =================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

async def send_station_notification(telegram_id: int, station_number: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        station_letter = text_manager.get_station_letter_by_number(station_number)
        message_text = text_manager.format_station_message(station_number, station_letter)
        
        await bot.send_message(telegram_id, message_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–Ω—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
        await db.update_participant_station(telegram_id, station_number)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_number} —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}")
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_number} —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}: {e}")


async def send_transition_notification(telegram_id: int, from_station: int, to_station: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        to_letter = text_manager.get_station_letter_by_number(to_station)
        message_text = text_manager.format_transition_message(from_station, to_station, to_letter)
        
        await bot.send_message(telegram_id, message_text)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ {from_station}‚Üí{to_station} —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}")
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}: {e}")


async def send_event_start_notification(telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        message_text = text_manager.format_event_started_message()
        
        await bot.send_message(telegram_id, message_text)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}")
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}: {e}")


async def send_event_completion_notification(telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        message_text = text_manager.format_event_completed_message()
        
        await bot.send_message(telegram_id, message_text)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}")
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É {telegram_id}: {e}")


# =================== –ú–ê–°–°–û–í–´–ï –†–ê–°–°–´–õ–ö–ò ===================

async def broadcast_to_all_participants(message_text: str):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        from aiogram import Bot
        from ..bot.config import Config
        
        bot = Bot(token=Config.BOT_TOKEN)
        
        participants = await db.get_all_active_participants()
        sent_count = 0
        failed_count = 0
        
        for participant in participants:
            try:
                await bot.send_message(participant.telegram_id, message_text)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {participant.telegram_id}: {e}")
                failed_count += 1
        
        logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
        
        await bot.session.close()
        return sent_count, failed_count
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return 0, 0


async def broadcast_station_to_all(station_number: int):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        participants = await db.get_all_active_participants()
        sent_count = 0
        
        for participant in participants:
            await send_station_notification(participant.telegram_id, station_number)
            sent_count += 1
        
        logger.info(f"–†–∞–∑–æ—Å–ª–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_number} –¥–ª—è {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return sent_count
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_number}: {e}")
        return 0


async def broadcast_transition_to_all(from_station: int, to_station: int):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        participants = await db.get_all_active_participants()
        sent_count = 0
        
        for participant in participants:
            await send_transition_notification(participant.telegram_id, from_station, to_station)
            sent_count += 1
        
        logger.info(f"–†–∞–∑–æ—Å–ª–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ {from_station}‚Üí{to_station} –¥–ª—è {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return sent_count
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ: {e}")
        return 0 